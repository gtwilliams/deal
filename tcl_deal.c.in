/*
 * Copyright (C) 1996-2001, Thomas Andrews
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */


#include <tcl.h>

#include <string.h>

#include <unistd.h>
#include <pwd.h>
#include <ctype.h>
#include <stdio.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
extern int getpid();

#include "deal.h"
#include "vector.h"
#include "stat.h"
#include "tcl_dist.h"
#include "formats.h"
#include "additive.h"
#include "stringbox.h"
#include "dealtypes.h"
#include "holdings.h"
#include <limits.h>
#include <getopt.h>

#include <stdlib.h>
#include "tcl_incl.h"

#define INSTALL_DIR "@DATA_DIR@"

typedef struct formatter {
    char *(*fn)();
} *FormatFN;

Tcl_Interp *interp;

void Tcl_ObjDelete(ClientData data) {
    Tcl_DecrRefCount((Tcl_Obj *)data);
}

void Tcl_AllocDelete(ClientData data) {
    Tcl_Free((char *)data);
}

int (*next_deal)() = start_deal;

static Tcl_Obj *after_exp=0;
static Tcl_Obj *main_exp=0;

static int cachesize=0;
static Tcl_Obj *resetCmds=NULL;

static void create_cache_reset() {
    if (resetCmds==NULL) {
        Tcl_IncrRefCount(resetCmds=Tcl_NewListObj(0,0));
        cachesize=0;
    }
}

static int do_reset_commands(Tcl_Interp *interp) {
    if (resetCmds!=NULL && cachesize!=0) {
        /*
         * Allow the resetCmds to cache data in the
         * next resetCmds
         */
        Tcl_Obj *oldCmds=resetCmds;
        int i;
        Tcl_Size count;
        Tcl_Obj **code;
        int result;

        cachesize=0;
        resetCmds=NULL;

        result=Tcl_ListObjGetElements(interp,oldCmds,&count,&code);
        if (result==TCL_OK) {
            for (i=count-1; i>=0; i--) {
                result=Tcl_GlobalEvalObj(interp,code[i]);
                if (result==TCL_RETURN) {
                    /*fprintf(stderr,"Got return in reset\n");*/
                    return TCL_RETURN;
                }
                if (result==TCL_ERROR) {
                    return TCL_ERROR;
                }
            }
            Tcl_ListObjReplace(interp,oldCmds,0,count,0,0);
        }
        Tcl_DecrRefCount(oldCmds);
    }

    return TCL_OK;
}

static void add_reset_cmd(Tcl_Interp *interp,Tcl_Obj *code)
{
    Tcl_Size length;
    if (resetCmds==NULL) {
        create_cache_reset();
    }

    Tcl_ListObjLength(interp,resetCmds,&length);

    Tcl_ListObjAppendElement(interp,resetCmds,code);
    cachesize++;
}

static int add_reset_cmds(TCLOBJ_PARAMS)
{
    int i=1;
    while (i<objc) {
        add_reset_cmd(interp,objv[i++]);
    }
    return TCL_OK;
}

int tcl_reset_deck (TCLOBJ_PARAMS)
{
    reset_deck();
    return TCL_OK;
}

int tcl_finish_deal (TCLOBJ_PARAMS)
{
    finish_deal();
    return TCL_OK;
}


int tcl_deal_deck (TCLOBJ_PARAMS)
{
    static char *result="exit";
    int retval;

    retval=do_reset_commands(interp);
    if (retval!=TCL_OK) {
        Tcl_SetResult(interp,result,TCL_STATIC);
        return retval;
    }

    retval=next_deal();

    if (retval==TCL_RETURN) {
        Tcl_SetResult(interp,result,TCL_STATIC);
    }
    return retval;
}

int tcl_format_deal (TCL_PARAMS)
{
    FormatFN fmt=(FormatFN)cd;
    char *format;
    finish_deal();
    format=fmt->fn();
    if (format!=NULL) {
        Tcl_SetResult(interp,format,TCL_DYNAMIC);
        return TCL_OK;
    } else {
        Tcl_AppendResult(interp,argv[0]," failed due to error: ",
                         Tcl_PosixError(interp),NULL);
        return TCL_ERROR;
    }
}

int tcl_write_deal (TCL_PARAMS)
{
    FormatFN fmt=(FormatFN)cd;
    char *format;
    FILE *file=stdout;
    finish_deal();
    format=fmt->fn();
    if (argc==2) {
        file=stderr;
    }
    if (format!=NULL) {
        fputs(format,file);
        Tcl_Free(format);
        return TCL_OK;
    } else {
        Tcl_AppendResult(interp,argv[0]," failed due to error: ",
                         Tcl_PosixError(interp),NULL);
        return TCL_ERROR;
    }
}

int tcl_flush_deal (TCLOBJ_PARAMS)
{
    return TCL_OK;    /* Default write flushing routing */
}

int tcl_rotate_deal (TCL_PARAMS)
{
    if (argc!=2) {
        Tcl_AppendResult(interp,
                         "wrong # of args: \"",argv[0]," <rotate>\"",NULL);
        return TCL_ERROR;
    }
    rotate_deal(atoi(argv[1]));
    return TCL_OK;
}

int tcl_stacked_cards (TCLOBJ_PARAMS)
{
    Tcl_Obj *holdings[4];
    int handnum, suit;
    int h[4];

    if (objc!=2) {
        Tcl_AddErrorInfo(interp,"Usage: stacked_cards <handname>\n");
        return TCL_ERROR;
    }

    handnum=getHandNumFromObj(interp,objv[1]);
    if (handnum==NOSEAT) {
        Tcl_AddErrorInfo(interp,"Invalid hand name\n");
        return TCL_ERROR;
    }

    get_stacked_cards(handnum,h);
    for (suit=0; suit<4; suit++) {
        holdings[suit]=Tcl_NewHoldingObj(h[suit]);
    }
    Tcl_SetObjResult(interp,Tcl_NewListObj(4,holdings));
    return TCL_OK;
}

int tcl_rand_cmd( TCLOBJ_PARAMS )
{
    long res,tclres,modulus;
    res=random();
    if (objc>1) {
        tclres=Tcl_GetLongFromObj(interp,objv[1],&modulus);
        if (tclres==TCL_ERROR) { return TCL_ERROR; }
        res %= modulus;
        Tcl_SetObjResult(interp,Tcl_NewIntObj(res));
    }
    else {
        double dres = res * 1.0 /((double)RANDOM_MAX+1);
        Tcl_SetObjResult(interp,Tcl_NewDoubleObj(dres));
    }
    return TCL_OK;
}

int tcl_after_set(TCLOBJ_PARAMS)
{
    if (objc!=2) {
        return TCL_ERROR;
    }
    if (after_exp != 0) {
        Tcl_DecrRefCount(after_exp);
    }
    Tcl_IncrRefCount(after_exp=Tcl_DuplicateObj(objv[1]));

    return TCL_OK;
}

int tcl_seed_deal(TCLOBJ_PARAMS)
{
    int result;
    Tcl_Size value;
    if (objc!=2) {
        return TCL_ERROR;
    }
    result=Tcl_GetSizeIntFromObj(interp,objv[1],&value);
    if (result==TCL_OK) {
#ifdef USE_RAND48
        srand48(value);
#else
        srandom(value);
#endif
    }
    return TCL_OK;
}


int tcl_main_set(TCLOBJ_PARAMS)
{
    if (objc!=2) {
        return TCL_ERROR;
    }
    if (main_exp != 0) { Tcl_DecrRefCount(main_exp); }
    Tcl_IncrRefCount(main_exp=Tcl_DuplicateObj(objv[1]));
    return TCL_OK;
}

int tcl_deal_loop(TCLOBJ_PARAMS)
{
    int result;
    if (objc!=2) {
        return TCL_ERROR;
    }

    while (1) {
        result=tcl_deal_deck(cd,interp,objc,objv);
        if (result==TCL_RETURN) {
            return TCL_RETURN;
        }
        if (result==TCL_ERROR) {
            return TCL_ERROR;
        }
        result=Tcl_GlobalEvalObj(interp,main_exp);
        if (result==TCL_ERROR) {
            /* fprintf(stderr,"Error in eval loop: %s\n",Tcl_GetStringResult(interp)); */
            return result;
        }
        if (result==TCL_RETURN) {
            Tcl_Obj *output=Tcl_GetObjResult(interp);
            Tcl_Size value;
            if (Tcl_GetSizeIntFromObj(interp,output,&value)!=TCL_ERROR && value>0) {
                break;
            }
        }
#ifdef DEBUG
        fprintf(stderr,"Rejected after %d cards dealt\n",complete_deal.dealt);
#endif
    }
    return Tcl_GlobalEvalObj(interp,objv[1]);
}

static Tcl_Obj *logicObj[2]={ NULL, NULL};

static int tcl_init(TCLOBJ_PARAMS)
{
    return Tcl_Init(interp);
}

/*
 * implements the 'accept' and 'reject' commands
 */
int tcl_deal_control(TCLOBJ_PARAMS)
{
    int i=2,value,result;
    Tcl_Obj *iffound,*ifnotfound;
    long data;
    int found,nfound;
    char *logic; /* Either "if" of "unless" */
    Tcl_Size length;

    if (logicObj[0]==NULL) {
        logicObj[0]=Tcl_NewBooleanObj(0);
        Tcl_IncrRefCount(logicObj[0]);
        logicObj[1]=Tcl_NewBooleanObj(1);
        Tcl_IncrRefCount(logicObj[1]);
    }

    data = (long) cd;  /* True if 'accept', false if 'reject' */
    if (objc==1) {
        Tcl_SetObjResult(interp,logicObj[data ? 1 : 0]);
        return TCL_RETURN;
    }

    logic=Tcl_GetStringFromObj(objv[1],&length);

    if (0==strcmp(logic,"if")) {
        iffound=logicObj[data!=0];
        found=TCL_RETURN;
        ifnotfound=logicObj[data==0];
        nfound=TCL_OK;
    } else if (0==strcmp(logic,"unless")) {
        iffound=logicObj[data==0];
        found=TCL_OK;
        ifnotfound=logicObj[data!=0];
        nfound=TCL_RETURN;
    } else {
        return TCL_ERROR;
    }

    for (i=2; i<objc; i++) {
        result=Tcl_ExprBooleanObj(interp,objv[i],&value);

        if (result==TCL_ERROR) { return TCL_ERROR; }

        if (value) {
            Tcl_IncrRefCount(iffound);
            Tcl_SetObjResult(interp,iffound);
            if (verbose>1) {
                fprintf(stderr,"Condition %s passed\n",Tcl_GetStringFromObj(objv[i],&length));
            }
            return found;
        }
    }
    Tcl_IncrRefCount(ifnotfound);
    Tcl_SetObjResult(interp,ifnotfound);
    return nfound;
}


DEAL31_API int *Deal_Init(Tcl_Interp *interp)
{
    char *dealtcl;

    FormatFN compact=(struct formatter*)Tcl_Alloc(sizeof(struct formatter));
    FormatFN deffmt=(struct formatter*)Tcl_Alloc(sizeof(struct formatter));

    initializeLengths();
    init_name_tables();

    initializeDealTypes(interp);
    compact->fn=&format_deal_compact;
    Tcl_CreateCommand(interp,"write_deal_compact",tcl_write_deal,
                      (ClientData)compact,NULL);
    Tcl_CreateCommand(interp,"format_deal_compact",tcl_format_deal,
                      (ClientData)compact,NULL);

    deffmt->fn=&format_deal_verbose;
    Tcl_CreateCommand(interp,"write_deal",tcl_write_deal,
                      (ClientData)deffmt,NULL);
    Tcl_CreateCommand(interp,"format_deal",tcl_format_deal,
                      (ClientData)deffmt,NULL);

    Tcl_CreateCommand(interp,"write_deal_verbose",tcl_write_deal,
                      (ClientData)deffmt,NULL);
    Tcl_CreateObjCommand(interp,"flush_deal",tcl_flush_deal,
                         NULL,NULL);
    Tcl_CreateObjCommand(interp,"stacked",tcl_stacked_cards,
                         NULL,NULL);

    Tcl_CreateCommand(interp,"rotatedeal",tcl_rotate_deal,NULL,NULL);

    Tcl_CreateCommand(interp,"sdev",tcl_sdev_define,NULL,NULL);
    Tcl_CreateObjCommand(interp,"correlation",tcl_correlation_define,NULL,NULL);

    HandCmd_Init(interp);
    Dist_Init(interp);
    Vector_Init(interp);
    Stringbox_Init(interp);
    IDealHolding_Init(interp);
    DDS_Init(interp);


    Tcl_CreateObjCommand(interp,"deal_deck",tcl_deal_deck,NULL,NULL);
    Tcl_CreateObjCommand(interp,"reset_deck",tcl_reset_deck,NULL,NULL);
    Tcl_CreateObjCommand(interp,"finish_deal",tcl_finish_deal,NULL,NULL);
    Tcl_CreateObjCommand(interp,"main",tcl_main_set,NULL,NULL);
    Tcl_CreateObjCommand(interp,"deal_finished",tcl_after_set,NULL,NULL);
    Tcl_CreateObjCommand(interp,"deal_loop",tcl_deal_loop,NULL,NULL);

    Tcl_CreateObjCommand(interp,"seed_deal",tcl_seed_deal,NULL,NULL);
    Tcl_CreateObjCommand(interp,"reject",tcl_deal_control,(ClientData)0,NULL);
    Tcl_CreateObjCommand(interp,"accept",tcl_deal_control,(ClientData)1,NULL);
    Tcl_CreateObjCommand(interp,"rand",tcl_rand_cmd,NULL,NULL);

    Tcl_CreateObjCommand(interp,"deal_reset_cmds",add_reset_cmds,NULL,NULL);

    Tcl_CreateObjCommand(interp,"deal_init_tcl",tcl_init,NULL,NULL);

    if ((dealtcl = malloc(15 + sizeof(INSTALL_DIR) + 1)) == NULL) {
        perror("malloc");
        exit(1);
    }

    strcpy(dealtcl, "source ");
    strcat(dealtcl, INSTALL_DIR);
    strcat(dealtcl, "deal.tcl");

    if (Tcl_Eval(interp, dealtcl) == TCL_ERROR) {
        tcl_error(interp);
    }

    free(dealtcl);

    Tcl_Eval(interp, "reset_deck");

    return TCL_OK;
}

static int executeScript(Tcl_Interp *interp,
                         const char *argv0,
                         int argc,
                         char *argv[],
                         const char *command) {
    int i;
    Tcl_Obj *list = Tcl_NewListObj(0,NULL);
    Tcl_SetVar(interp,"argv0",argv0,TCL_GLOBAL_ONLY);
    Tcl_SetVar2Ex(interp,"argc",NULL,Tcl_NewIntObj(argc),TCL_GLOBAL_ONLY);

    for (i=0;i<argc;i++) {
        Tcl_ListObjAppendElement(interp,list,Tcl_NewStringObj(argv[i],strlen(argv[i])));
    }
    Tcl_SetVar2Ex(interp,"argv",NULL,list, TCL_GLOBAL_ONLY);
    return Tcl_Eval(interp, command);
}

struct param_item {
    int hand;
    const char *item;
    struct param_item *next;
};

static void add_to_list(struct param_item **list, const char *item,
	int hand)
{
    struct param_item *new;
    struct param_item *last;

    if ((new = malloc(sizeof(struct param_item))) < 0) {
	perror("add_to_list: malloc");
	exit(1);
    }

    new->next = NULL;
    new->hand = hand;

    if ((new->item = strdup(item)) == NULL) {
	perror("add_to_list: strdup");
	exit(1);
    }

    if (*list == NULL) {
	*list = new;
	return;
    }

    last = *list;
    while (last->next != NULL)
	last = last->next;

    last->next = new;
}

int old_main(argc,argv)
     int argc;
     char *argv[];
{

    int i;
    int count=10;
    char tcl_command_string[512];
    char *writecmd="write_deal";
    char *flushcmd="flush_deal";
    time_t for_seeding;
    Tcl_Obj *command;
    Tcl_Interp *interp=Tcl_CreateInterp();

    int opt;
    int result;
    extern int optind;
    extern char *optarg;

    struct param_item *eval_list   = NULL;
    struct param_item *source_list = NULL;
    struct param_item *input_list  = NULL;
    struct param_item *stack_list  = NULL;

    init_name_tables();

    time(&for_seeding);
    for_seeding ^= getpid();

    while (-1!=(opt=getopt(argc,argv,"lve:S:N:E:W:i:ts:fo:VI:x:p:"))) {
        switch (opt) {
        case 'l':
            writecmd="write_deal_compact";
            break;
        case 'V':
            verbose=2;
            break;
        case 'v':
            verbose=1;
            break;
        case 'e':
	    add_to_list(&eval_list, optarg, 0);
            break;

        case 'I':
	    add_to_list(&input_list, optarg, 0);
            break;

        case 'S':
        case 'N':
        case 'E':
        case 'W':
	    add_to_list(&stack_list, optarg, opt);
            break;

        case 's':
            for_seeding=atoi(optarg);
            break;

        case 'x':
	    Deal_Init(interp);
            sprintf(tcl_command_string,"source %s",optarg);
            result = executeScript(interp, optarg,argc-optind,argv+optind, tcl_command_string);
            if (result==TCL_ERROR) {
                tcl_error(interp);
            }
#ifdef DEBUG_MEMORY_OSX
            while(1) sleep(60);
#endif
            Tcl_DeleteInterp(interp);
            exit(0);
        case 'i':
	    add_to_list(&source_list, optarg, 0);
            break;

        case 't':
            printDistTable();
            exit(1);

	case 'p':
	    if (chdir(optarg) != 0) {
		perror(optarg);
	    }

	    break;

        default:
            fprintf(stderr,"usage:  %s [-v] [-s seed] "
		    "[-i includeFile] [-I inputFormat] [count]\n",
                    argv[0]);
            exit(1);
        }
    }

#ifdef USE_RAND48
    srand48(for_seeding);
#else
    srandom(for_seeding);
#endif

    Deal_Init(interp);

    argc-=optind-1;
    argv+=optind-1;

    if (argc>1 && isdigit(*argv[1])) {
        count=atoi(argv[1]);
        argc--; argv++;
    }

    /* process -e option list */
    while (eval_list != NULL) {
	struct param_item *last;

	if (Tcl_Eval(interp, eval_list->item) == TCL_ERROR) {
	    tcl_error(interp);
	}

	free((char *) eval_list->item);
	last = eval_list;
	eval_list = eval_list->next;
	free(last);
    }

    /* process -I option list */
    while (input_list != NULL) {
	struct param_item *last;
	char *cmd;

	/* XXX length of "deal::input " is 12 */
	if ((cmd = malloc(strlen(input_list->item) + 12 + 1)) == NULL)
	{
	    perror("malloc");
	    exit(1);
	}

	strcpy(cmd, "deal::input ");
	strcat(cmd, input_list->item);

	if (Tcl_Eval(interp, cmd) == TCL_ERROR) {
	    tcl_error(interp);
	}

	free(cmd);
	free((char *) input_list->item);
	last = input_list;
	input_list = input_list->next;
	free(last);
    }

    /* process -[NSEW] option list */
    while (stack_list != NULL) {
	struct param_item *last;
	char *cmd;

	/* XXX length of " is " is 4 */
	if ((cmd = malloc(strlen(handname[
			    hand_name_table[stack_list->hand]])
			+ strlen(stack_list->item) + 4 + 1)) == NULL)
	{
	    perror("malloc");
	    exit(1);
	}

	strcpy(cmd, handname[hand_name_table[stack_list->hand]]);
	strcat(cmd, " is ");
	strcat(cmd, stack_list->item);

	if ((Tcl_Eval(interp, cmd)) == TCL_ERROR) {
	    fprintf(stderr, "Failure attempts to stack hand %s\n",
		    stack_list->item);
	    Tcl_GlobalEval(interp, "puts stderr $errorInfo");
	    exit(1);
	}

	free(cmd);
	free((char *) stack_list->item);
	last = stack_list;
	stack_list = stack_list->next;
	free(last);
    }

    /* process -i option list */
    while (source_list != NULL) {
	struct param_item *last;
	char *cmd;
        size_t n = strlen(source_list->item) + 7 + 1;

        /* if -i specifies special files, we need to prepend the
         * installation directory path onto the user's specification
         * before calling the interpreter.  Othewise, assume the user
         * specified the file as it is. */
        if (strncmp(source_list->item, "ex/",     3) == 0 ||
            strncmp(source_list->item, "format/", 7) == 0 ||
            strncmp(source_list->item, "input/",  6) == 0 ||
            strncmp(source_list->item, "lib/",    4) == 0)
        {
            n += sizeof(INSTALL_DIR);
            if ((cmd = malloc(n)) == NULL) {
                perror("malloc");
                exit(1);
            }
            strcpy(cmd, "source ");
            strcat(cmd, INSTALL_DIR);
        }

        else {
            if ((cmd = malloc(n)) == NULL) {
                perror("malloc");
                exit(1);
            }

            strcpy(cmd, "source ");
        }

        strcat(cmd, source_list->item);

	if ((Tcl_Eval(interp, cmd)) == TCL_ERROR) {
	    tcl_error(interp);
	}

	free(cmd);
	free((char *) source_list->item);
	last = source_list;
	source_list = source_list->next;
	free(last);
    }

    if (main_exp!=(Tcl_Obj *)0) {
        sprintf(tcl_command_string,"deal_loop %s",writecmd);
        argc--; argv++;
    } else {
        sprintf(tcl_command_string,"deal_deck ; %s",writecmd);
    }

    command=Tcl_NewStringObj(tcl_command_string,(int)strlen(tcl_command_string));

    Tcl_IncrRefCount(command);

    for (i=1; i<=count; i++) {
        const char *s;
        result=Tcl_GlobalEvalObj(interp,command);
        if (result==TCL_ERROR) { tcl_error(interp); }

        if (result==TCL_RETURN) { break; }

        s=Tcl_GetStringResult(interp);
        if (*s=='e' && (0==strcmp("exit",s))) {
            break;
        }

        if (verbose) {
            fprintf(stderr,"Deal %d found after %d tries\n",i,count_deals);
        }
    }

    if (Tcl_Eval(interp, flushcmd) == TCL_ERROR) {
	tcl_error(interp);
	exit(1);
    }

    if (after_exp) {
        if (Tcl_GlobalEvalObj(interp, after_exp) == TCL_ERROR) {
	    tcl_error(interp);
	    exit(1);
	}
    }

    return 0;
}
